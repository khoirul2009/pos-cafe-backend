// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Banner {
  id         Int      @id @default(autoincrement())
  title      String
  image      String
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("banners")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @unique
  password   String
  phone      String?
  role       String   @default("customer") // Bisa "admin", "customer", atau "photographer"
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]

  @@map("users")
}

model Gallery {
  id         Int      @id @default(autoincrement())
  title      String
  image      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("galleries")
}

model Category {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Service    Service[]

  @@map("categories")
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  image       String
  price       Int
  discount    Int? // Diskon dalam persen (opsional)
  description String   @db.Text
  category_id Int
  available   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category Category  @relation(fields: [category_id], references: [id])
  Booking  Booking[]

  @@map("services")
}

model Booking {
  id          Int      @id @default(autoincrement())
  user_id     Int
  service_id  Int
  time        String
  location    String
  is_accepted Boolean  @default(false)
  status      String   @default("pending") // Bisa "pending", "confirmed", "completed", "canceled"
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user          User           @relation(fields: [user_id], references: [id])
  service       Service        @relation(fields: [service_id], references: [id])
  payments      Payment[]
  booking_dates BookingDates[]

  @@map("bookings")
}

model BookingDates {
  id         Int      @id @default(autoincrement())
  date       DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  booking    Booking? @relation(fields: [booking_id], references: [id])
  booking_id Int

  @@map("booking_dates")
}

model Payment {
  id             Int      @id @default(autoincrement())
  payment_uuid   String
  booking_id     Int
  amount         Int
  status         String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  payment_method String
  acquirer       String
  qr_url         String?
  redirect_url   String?
  billing_num    String?
  type           String   @default("dp")

  booking Booking @relation(fields: [booking_id], references: [id])

  @@map("payments")
}
